---
title: "Colombian geographic reference database: development database creation"
author: "Marius Bottin"
format: 
  gfm:
    df-print: kable
bibliography: sources.bib
---

The files have been downloaded with the code from <./step1_downloading_sources.md>.
Now it is time to create the database and to start analysing the maps.

In order to make the most of spatial database, the most efficient system is Postgis (spatial extension of PostgreSQL.
It is actually more complicated than a spatialite database (from SQLite), and spatialite is a very good candidate for the final database, but since the calculations needed to create the database might be quite heavy, it makes sense to use Postgis here.
One of the said advantages is the possibility to directly use spatial indexes without needing to change the queries.

# Reading files

```{r}
files_sourceMaps<-dir("./sourceMaps",recursive = T)
bs_files_sourceMaps<-basename(files_sourceMaps)
dir_files_sourceMaps<-dirname(files_sourceMaps)
downloaded<-read.csv("./sourceMaps/sourcesDownloaded.csv",row.names=1)
stopifnot(downloaded$testFile%in%bs_files_sourceMaps)
mainFiles<-paste0("./sourceMaps/",files_sourceMaps[match(downloaded$testFile,bs_files_sourceMaps)])
```


Now we can read the files and put them in a list `data`.
We will transform the data and put them into MAGNAS-SIRGAS, more fitted to data in Colombia.


```{r}
require(sf)
data<-lapply(mainFiles,st_read)
names(data)<-downloaded$name
epsgMagnas<-4686
magnas<-st_crs(epsgMagnas)
data<-lapply(data,st_transform,crs=magnas)
# I do not know whether it is a real postgis convention, but I usually use "geom" for the development tables and query results and "the_geom" for the final tables
data<-lapply(data,st_set_geometry,"geom")
# It is always easier in postgres to have lowercase field names, in order not to be able to make queries without quotes
data<-lapply(data,function(x){
  colnames(x)<-tolower(colnames(x))
  return(x)
})
```


# Creating the database and putting the raw data in it


In order for the code to work it needs a postgis database.
You may change its name and adresses, but what you need to do is:

* install postgreSQL and postgis on your computer
* set the server up so it accepts connections
* create a database called dev_geogref (or whatever you wanna call it), in SQL `CREATE DATABASE dev_geogref [WITH OWNER [...]]`
* load the postgis extension in the database, in SQL, from the database newly created: `CREATE EXTENSION postgis`

All of those are possible to be done directly from R, by connecting first to the cluster with superuser rights, but there are many possible configurations, so please do it from your computer with the options that suit you better.




```{r}
require(RPostgres)
# Note: here we will create a DBI connection to the postgres database, 
# do not hesitate to adapt to the server you use,
# add authentification parameters if you need them, etc
dev_geogRef<-dbConnect(Postgres(),dbname="dev_geogref",host="localhost")
nameTables<-tolower(paste0("raw_", downloaded$name))
for(i in 1:length(data))
{
  cat("writing ", nameTables[i], "to Postgis database ...\n")
  st_write(data[[i]],dsn=dev_geogRef,layer=nameTables[i],driver="PostgreSQL",append=F,delete_layer = T)
  # Correcting topology problems
  cat("\t correcting topology problems\n")
  dbExecute(dev_geogRef,paste0("UPDATE ", nameTables[i], " SET geom=ST_MakeValid(geom) WHERE NOT ST_IsValid(geom)"))
  # Getting the SRID directly in the definition of the field
  # sf do not do that, in order to be able to put geometries with different SRID in a same field
  cat("\t constraing SRID of the geometry\n")
  dbExecute(dev_geogRef, paste0("ALTER TABLE ",nameTables[i]," ALTER COLUMN geom type geometry(MULTIPOLYGON,",epsgMagnas,") USING ST_Force2D(geom)")) 
  # Creating the spatial index
  cat("\t creating spatial index\n")
  dbExecute(dev_geogRef,paste0("CREATE INDEX IF NOT EXISTS ",nameTables[i],"_geom_idx ON ",nameTables[i]," USING GIST(geom);"))
  cat("done\n\n")
}
```
************************************************

Note that there a many topology problems in both the map of the veredas and the map of the resguardos.
If there is time at some point, it would be worth exploring (it might be the maps themselves or the transformation we do!)

************************************************

Â¡So now we have the database with the raw data in it!
Let's play a bit with it

# Analysing raw spatial tables

## Overlapping polygons

Good news there are no overlap between the vereda polygons!

```{sql}
#| connection: dev_geogRef
WITH a AS(
  SELECT rv1.objectid,rv2.objectid
  FROM raw_veredas rv1 
  JOIN raw_veredas rv2 
    ON 
      ST_Overlaps(rv1.geom,rv2.geom) 
      AND 
      rv1.objectid > rv2.objectid
      )
SELECT count(*)
FROM a
```

However, there are a few ones between the polygons of urban centers from the DANE

```{sql}
#| connection: dev_geogRef
WITH a AS(
  SELECT rc1.cod_dane,rc2.cod_dane
  FROM raw_centpobl rc1 
  JOIN raw_centpobl rc2 
    ON 
      ST_Overlaps(rc1.geom,rc2.geom) 
      AND 
      rc1.cod_dane > rc2.cod_dane
      )
SELECT count(*)
FROM a
```

And, a few more between the polygons of the resguardos from the Agencia Nacional de Tierras.

```{sql}
#| connection: dev_geogRef
WITH a AS(
  SELECT rr1.objectid,rr2.objectid
  FROM raw_resguardo rr1 
  JOIN raw_resguardo rr2 
    ON 
      ST_Overlaps(rr1.geom,rr2.geom) 
      AND 
      rr1.objectid > rr2.objectid
      )
SELECT count(*)
FROM a
```

These overlaps might be problematic in the senses that:

* we could not create a rule of mutual exclusion in the final table
* without rules of exclusions, we may have a point that end up in 2 polygons of the same type (it would probably be very unlikely but possible, so we need to take that possibility into account)

However the good news is that the central system of veredas would not contain this kind of problems.


# Plotting the unified ("dissolved") polygons from the 3 tables

Concerning the veredas, we've got a lot of "holes" in the maps, which mostly correspond to dense urban areas (and therefore might be corrected by using *raw_centpobl*).


```{r}
#| fig-width: 10
#| fig-height: 10
diss_veredas<-st_read(dev_geogRef,query="SELECT ST_UNION(geom) FROM raw_veredas")
plot(diss_veredas,mar=c(0,0,0,0),col="red",border=NA)
```

 

```{r}
#| fig-width: 10
#| fig-height: 10
diss_centpob<-st_read(dev_geogRef,query="SELECT ST_UNION(geom) FROM raw_centpobl")
plot(diss_centpob,mar=c(0,0,0,0),border="grey",col="blue",lwd=.1)
```

Here we can see that most (all?) of the holes from veredas are filled up with urban areas:

```{r}
#| fig-width: 10
#| fig-height: 10
plot(diss_centpob,col="blue",border=NA,reset=F)
plot(diss_veredas,col="red",border=NA,add=T)
```

This means that we could have a complete map by merging the objects.




# 

We've got another problem here, everything is as instead of having multipolygons, *raw_centpobl* had transformed the multipolygons into polygons.
It might even be possible that in those cases the polygons have a small deviation, because limits do not corresponds anymore to the limits from the raw_veredas.

```{sql}
#| connection: dev_geogRef
WITH a AS(
SELECT orig_fid 
FROM raw_centpobl
GROUP BY orig_fid
HAVING count(*)>1
)
SELECT rc.*
FROM a 
LEFT JOIN raw_centpobl rc USING (orig_fid)
ORDER BY orig_fid 
```
```{r}
veredas<-st_read(dev_geogRef,layer="raw_veredas")

```

```{r}
q<-"
WITH a AS(
SELECT orig_fid 
FROM raw_centpobl
GROUP BY orig_fid
HAVING count(*)>1
ORDER BY random()
LIMIT 50
)
SELECT rc.*
FROM a 
LEFT JOIN raw_centpobl rc USING (orig_fid)
ORDER BY orig_fid 
"
rand10_multi<-st_read(dev_geogRef,query=q)
for(i in unique(rand10_multi$orig_fid))
{
  plot(st_geometry(rand10_multi[rand10_multi$orig_fid==i,]),reset=F,col=NA,main=unique(rand10_multi$nom_cpob[rand10_multi$orig_fid==i]))
  plot(st_geometry(veredas),add=T,col=adjustcolor("red",alpha.f = .3))
  plot(st_geometry(rand10_multi[rand10_multi$orig_fid==i,]),add=T,col=adjustcolor("blue", alpha.f = .3))
}
```

# Joining raw_centpobl y raw_veredas into multipolygons 


The best might be to create a new table...

```sql
DROP TABLE IF EXISTS raw_centpobl2 CASCADE;
CREATE TABLE raw_centpobl2 AS(
  SELECT cod_dpto, cod_mpio, cod_clas, cod_setr, cod_secr, cod_cpob, nom_cpob, cod_dane, cpob_area, altitud, shape_area, shape_len, orig_fid, ST_UNION(geom) geom
  FROM raw_centPobl
  GROUP BY cod_dpto, cod_mpio, cod_clas, cod_setr, cod_secr, cod_cpob, nom_cpob, cod_dane, cpob_area, altitud, shape_area, shape_len, orig_fid
);
ALTER TABLE raw_centpobl2 ALTER COLUMN geom TYPE GEOMETRY(MULTIPOLYGON,4686);
CREATE INDEX raw_centpobl2_spat_idx ON raw_centpobl2 USING GIST(geom);
ALTER TABLE raw_centpobl2 ADD PRIMARY KEY (cod_cpob);

DROP TABLE IF EXISTS raw_veredas2 CASCADE;
CREATE TABLE raw_veredas2 AS(
  SELECT cod_dpto, dptompio, codigo_ver, nom_dep, nomb_mpio, nombre_ver, vigencia, fuente, STRING_AGG(descripcio, '|') descripcio, MAX(seudonimos) seudonimos, STRING_AGG(observacio,'|') observacio, conseje, ST_UNION(geom) geom
  FROM raw_veredas
  GROUP BY cod_dpto,dptompio, codigo_ver, nom_dep, nomb_mpio, nombre_ver, vigencia, fuente,  conseje
);
ALTER TABLE raw_veredas2 ADD PRIMARY KEY (codigo_ver);
CREATE INDEX IF NOT EXISTS raw_veredas2_spat_idx ON raw_veredas2 USING GIST(geom);
```

```{sql}
#| connection: dev_geogRef
SELECT orig_fid,count(*)
FROM raw_centpobl2
GROUP BY orig_fid
HAVING count(*)>1
```
```sql
ALTER TABLE raw_veredas ADD PRIMARY KEY (objectid);
```
# Check which ones correspond to empty areas in raw_veredas

```sql
DROP TABLE IF EXISTS ver_over_centob CASCADE;
CREATE TABLE IF NOT EXISTS ver_over_centpob
(
  vereda text REFERENCES raw_veredas2(codigo_ver),
  centpob char(8) REFERENCES raw_centpobl2 (cod_cpob),
  common_area double precision,
  PRIMARY KEY (vereda,centpob)
);
INSERT INTO ver_over_centpob
SELECT codigo_ver,cp.cod_cpob,ST_Area(ST_intersection(cp.geom,v.geom))
FROM raw_centpobl2 cp
JOIN raw_veredas2 v ON ST_overlaps(cp.geom,v.geom);

ALTER TABLE raw_centpobl2 DROP COLUMN IF EXISTS over_vereda_cd_ver, DROP COLUMN IF EXISTS shared_area_vereda;
ALTER TABLE raw_centpobl2 ADD COLUMN IF NOT EXISTS over_vereda_cd_ver TEXT[], ADD COLUMN IF NOT EXISTS shared_area_vereda double precision;

WITH a AS(
SELECT cp.orig_fid, ARRAY_AGG(voc.vereda) over_ver,
  CASE
    WHEN SUM(common_area) IS NULL THEN 0
    ELSE SUM(common_area)
  END shared_area
FROM raw_centpobl2 cp
LEFT JOIN ver_over_centpob voc ON centpob=cod_cpob
GROUP BY cp.orig_fid
)
UPDATE raw_centpobl2 cp
SET over_vereda_cd_ver=a.over_ver, shared_area_vereda=a.shared_area
FROM a
WHERE a.orig_fid=cp.orig_fid;

ALTER TABLE raw_centpobl2 ADD COLUMN IF NOT EXISTS prop_area_vereda double precision;
UPDATE raw_centpobl2 SET prop_area_vereda=shared_area_vereda/ST_Area(geom);

```

It appears there are no intermediate case: either urban areas are excluded from the veredas, or they are integrated:

```{r}
cp2<-dbReadTable(dev_geogRef,"raw_centpobl2")
hist(cp2$prop_area_vereda, nclass=100)
```


# Reference tables: departments and municipalities

## Department

```{sql}
#| connection: dev_geogRef
SELECT cod_dpto, nom_dep, ARRAY_AGG(DISTINCT dptompio)
FROM raw_veredas
GROUP BY cod_dpto, nom_dep
ORDER BY cod_dpto
```

```sql
DROP TABLE IF EXISTS departamento CASCADE;
DROP TABLE IF EXISTS municipio CASCADE;
DROP TABLE IF EXISTS vereda CASCADE;

CREATE TABLE departamento(
  cd_dpto char(2) PRIMARY KEY,
  departamento text UNIQUE,
  distrito_capital boolean default false
);
CREATE TABLE municipio(
  cd_mpio char(5) PRIMARY KEY,
  municipio text,
  cd_dpto varchar(2) REFERENCES departamento(cd_dpto),
  UNIQUE(cd_dpto,municipio)
);
CREATE INDEX fkey_municipio_departamento_cd_dpto_idx ON municipio(cd_dpto);
CREATE TABLE vereda(
  cd_ver varchar(8) PRIMARY KEY,
  vereda text,
  cd_mpio char(5) REFERENCES municipio(cd_mpio),
  cd_dpto char(2) REFERENCES departamento(cd_dpto),
  centro_pobl boolean default false,
  vigencia integer,
  seudonimos boolean,
  fuente text,
  comentarios text
);
SELECT AddGeometryColumn ('public','vereda','the_geom',4686,'MULTIPOLYGON',2);
CREATE INDEX fkey_vereda_municipio_cd_mpio_idx ON vereda(cd_mpio);
CREATE INDEX fkey_vereda_municipio_cd_dpto_idx ON vereda(cd_dpto);
CREATE INDEX vereda_the_geom_spat_idx ON vereda USING GIST(the_geom);
INSERT INTO departamento(cd_dpto,departamento)
SELECT DISTINCT cod_dpto,nom_dep
FROM raw_veredas2;
UPDATE departamento SET distrito_capital=true WHERE cd_dpto='11';
--- It appears there is an error with the vereda SAN JUAN DE LAS COCHAS (86219000) en el departamento del Putumayo, which appears in the municipality SIBUNDOY when its code places it in the municipality COLÃN. It would need some more research to know whether the error is the municipality or the code, but for now we will accept the code and change the name of the municipality
UPDATE raw_veredas2
SET nomb_mpio='COLÃN'
WHERE codigo_ver='86219000';
INSERT INTO municipio
SELECT DISTINCT dptompio,nomb_mpio,cod_dpto
FROM raw_veredas2;
INSERT INTO vereda(cd_ver,vereda,cd_mpio,cd_dpto,vigencia,seudonimos,fuente,comentarios,the_geom)
SELECT 
  codigo_ver,
  CASE
    WHEN nombre_ver='SIN INFORMACION' THEN NULL
    ELSE nombre_ver
  END vereda,
  dptompio,
  cod_dpto,
  CASE
    WHEN vigencia IN ('INDF','ESRI') THEN NULL
    ELSE vigencia::int
  END vigencia,
  seudonimos::boolean,
  fuente,
  CASE
    WHEN descripcio IN ('','Null','NULL','NULL|NULL') THEN NULL
    ELSE descripcio
  END || '|' ||
  CASE
    WHEN observacio IN ('') THEN NULL
    WHEN observacio='MODIFICADA|MODIFICADA' THEN 'MODIFICADA'
    ELSE observacio
  END,
  geom
FROM raw_veredas2
;

```
# Creating the urban center layer


```sql
DROP TABLE IF EXISTS clas_cent_pobl CASCADE;
DROP TABLE IF EXISTS cent_pobl CASCADE;
CREATE TABLE clas_cent_pobl
(
  cd_clas int PRIMARY KEY,
  clas text UNIQUE
);
INSERT INTO clas_cent_pobl
VALUES
  (1,'Cabecera municipal'),
  (2,'Centro urbano'),
  (3,'Rural');
CREATE TABLE cent_pobl(
  cd_cpob char(8) PRIMARY KEY,
  cd_dane char(14) UNIQUE,
  cent_pobl text,
  cd_dpto char(2) REFERENCES departamento(cd_dpto),
  cd_mpio char(5) REFERENCES municipio(cd_mpio),
  cd_setr char(3),
  cd_secr char(2),
  cd_clas int REFERENCES clas_cent_pobl(cd_clas)
);
SELECT AddGeometryColumn ('public','cent_pobl','the_geom',4686,'MULTIPOLYGON',2);
CREATE INDEX fkey_cent_pobl_municipio_cd_mpio_idx ON cent_pobl(cd_mpio);
CREATE INDEX fkey_cent_pobl_municipio_cd_dpto_idx ON cent_pobl(cd_dpto);
CREATE INDEX cent_pobl_the_geom_spat_idx ON cent_pobl USING GIST(the_geom);
COMMENT ON COLUMN cent_pobl.cd_cpob IS 'CÃ³digo DANE concatenado departamento, municipio y  centro poblado';
COMMENT ON COLUMN cent_pobl.cd_dane IS 'CÃ³digo DANE concatenado departamento, municipio, clase, sector rural, secciÃ³n rural y centro poblado';
COMMENT ON COLUMN cent_pobl.cd_dpto IS 'CÃ³digo DANE departamento';
COMMENT ON COLUMN cent_pobl.cd_mpio IS 'CÃ³digo DANE municipio';
COMMENT ON COLUMN cent_pobl.cd_setr IS 'CÃ³digo DANE sector rural';
COMMENT ON COLUMN cent_pobl.cd_secr IS 'CÃ³digo DANE secciÃ³n rural';

INSERT INTO cent_pobl
SELECT cod_cpob, cod_dane, nom_cpob, cod_dpto, cod_mpio, cod_setr, cod_secr, cod_clas::int,geom
FROM raw_centpobl2;

```



# Adding urban centers into the vereda layer (filling holes)



```sql
-- I don't understand why those give different results:
SELECT cd_cpob, cd_ver, ST_Area(ST_intersection(v.the_geom,cp.the_geom),true) common_area_m2
FROM cent_pobl v
JOIN vereda cp ON ST_Intersects(v.the_geom,cp.the_geom) AND ST_Area(ST_intersection(v.the_geom,cp.the_geom),true) > 0
ORDER BY cd_cpob, ST_Area(ST_intersection(v.the_geom,cp.the_geom),true);

SELECT cd_cpob, cd_ver, ST_Area(ST_intersection(v.the_geom,cp.the_geom),true) common_area_m2
FROM cent_pobl v
JOIN vereda cp ON ST_Overlaps(v.the_geom,cp.the_geom)
ORDER BY cd_cpob, ST_Area(ST_intersection(v.the_geom,cp.the_geom),true);

CREATE TABLE test AS(
  SELECT cd_cpob, cd_ver, ST_area(ST_intersection(v.the_geom,cp.the_geom),true) area, ST_MakeValid(ST_intersection(v.the_geom,cp.the_geom)) geom
  FROM cent_pobl v
  JOIN vereda cp ON ST_Intersects(v.the_geom,cp.the_geom) AND ST_Area(ST_intersection(v.the_geom,cp.the_geom)) > 0
);
SELECT ST_GeometryType(geom),min(area),max(area),count(*) FROM test GROUP BY ST_GeometryType(geom);
SELECT cd_cpob, count(DISTINCT cd_ver)
FROM cent_pobl
LEFT JOIN test USING (cd_cpob)
GROUP BY cd_cpob
ORDER BY count(DISTINCT cd_ver);
```

```sql
DROP TABLE IF EXISTS vereda_cpob;
CREATE TABLE vereda_cpob
(
  id serial PRIMARY KEY,
  cd_ver varchar(8),
  cd_cpob char(8) REFERENCES cent_pobl(cd_cpob),
  name text,
  cd_mpio char(5) NOT NULL REFERENCES municipio(cd_mpio),
  cd_dpto char(2) NOT NULL REFERENCES departamento(cd_dpto),
  vigencia integer,
  seudonimos boolean,
  fuente text,
  comentarios text
);
SELECT AddGeometryColumn ('public','vereda_cpob','the_geom',4686,'MULTIPOLYGON',2);
CREATE INDEX fkey_vereda_cpob_municipio_cd_mpio_idx ON vereda_cpob(cd_mpio);
CREATE INDEX fkey_vereda_cpob_departamento_cd_dpto_idx ON vereda_cpob(cd_dpto);
CREATE INDEX vereda_cpob_the_geom_spat_idx ON vereda_cpob USING GIST(the_geom);
COMMENT ON COLUMN vereda_cpob.cd_ver IS 'Null cuando es una vereda clasica, cuando es un centro poblado, corresponde al CÃ³digo DANE concatenado departamento, municipio y  centro poblado';
COMMENT ON COLUMN vereda_cpob.cd_cpob IS 'Null cuando es una vereda clasica, cuando es un centro poblado, corresponde al CÃ³digo DANE concatenado departamento, municipio y  centro poblado';
INSERT INTO vereda_cpob(cd_ver,name,cd_mpio,cd_dpto,vigencia,seudonimos,fuente,comentarios,the_geom)
SELECT cd_ver,vereda,cd_mpio,cd_dpto,vigencia,seudonimos,fuente,comentarios,the_geom
FROM vereda;


WITH a AS(
  SELECT cd_cpob, cd_ver
  FROM cent_pobl v
  JOIN vereda cp ON ST_Intersects(v.the_geom,cp.the_geom) AND ST_Area(ST_intersection(v.the_geom,cp.the_geom)) > 0
)
--INSERT INTO vereda_cpob(cd_cpob,name,cd_mpio,cd_dpto,vigencia,seudonimos,fuente,comentarios,the_geom)
FROM cent_pobl cp
LEFT JOIN a USING(cd_cpob)
--WHERE cd_ver IS NULL
;

DROP TABLE IF EXISTS test2;
CREATE TABLE test2 AS(
  SELECT cd_cpob, ST_Multi(ST_Difference(cp.the_geom,ST_Union(v.the_geom))) geom
  FROM test
  JOIN cent_pobl cp USING (cd_cpob)
  JOIN vereda v USING (cd_ver)
  GROUP BY cd_cpob, cp.the_geom
);
SELECT ST_GeometryType(geom),count(*) FROM test2 GROUP BY ST_GeometryType(geom);

SELECT count(DISTINCT cd_cpob)
FROM cent_pobl
LEFT JOIN test2 USING (cd_cpob)
WHERE ST_Area(geom)/ST_Area(the_geom)>0.01;

SELECT count(DISTINCT cd_cpob)
FROM cent_pobl
LEFT JOIN test2 USING (cd_cpob)
WHERE ST_Area(geom)/ST_Area(the_geom)>0.99;

SELECT count(DISTINCT cd_cpob)
FROM cent_pobl
LEFT JOIN test2 USING (cd_cpob)
WHERE ST_Area(geom)/ST_Area(the_geom) >0 AND ST_Area(geom)/ST_Area(the_geom) < 0.01;

SELECT count(DISTINCT cd_cpob)
FROM cent_pobl
LEFT JOIN test2 USING (cd_cpob)
WHERE ST_Area(geom)/ST_Area(the_geom)=0;

INSERT INTO vereda_cpob(cd_cpob,name,cd_mpio,cd_dpto,vigencia,seudonimos,fuente,comentarios,the_geom)
SELECT cd_cpob, cent_pobl,  cd_mpio, cd_dpto, NULL AS vigencia,NULL AS seudonimos, 'CAPA MGN_URB_AREA_CENSAL CENTROS POBLADOS' AS fuente, NULL AS comentarios, geom
FROM cent_pobl
LEFT JOIN test2 USING(cd_cpob)
WHERE ST_Area(geom)/ST_Area(the_geom)>0.001;


```

# Did it work? Topologies of municipalities and departments

First we create materialized views for municipalities and departments:

```sql
CREATE MATERIALIZED VIEW dissolved_mpio AS(
  SELECT cd_mpio, municipio, cd_dpto, ST_Union(the_geom) geom
  FROM municipio
  LEFT JOIN vereda_cpob USING (cd_mpio,cd_dpto)
  GROUP BY cd_mpio, municipio, cd_dpto
);
CREATE INDEX mview_dissolved_mpio_spat_idx ON dissolved_mpio USING GIST(geom);
CREATE MATERIALIZED VIEW dissolved_dpto AS(
  SELECT cd_dpto, departamento, ST_Union(the_geom) geom
  FROM departamento
  LEFT JOIN vereda_cpob USING (cd_dpto)
  GROUP BY cd_dpto,departamento
);
CREATE INDEX mview_dissolved_dpto_spat_idx ON dissolved_dpto USING GIST(geom);
CREATE MATERIALIZED VIEW dissolved_colombia AS(
  SELECT 'Colombia' AS pais, ST_Union(the_geom) geom
  FROM vereda_cpob
  GROUP BY 1
);

```

It has indeed some interior rings in it.

```sql
DROP TABLE IF EXISTS interior_rings;
CREATE TABLE interior_rings AS(
SELECT a.path polygon_path,(ST_DumpRings(geom)).*
FROM (SELECT (ST_Dump(geom)).* FROM dissolved_colombia) a
);
DELETE FROM interior_rings WHERE path=ARRAY[0];
CREATE INDEX interior_rings_spat_idx ON interior_rings USING GIST(geom);
```

```sql
WITH a AS(
SELECT DISTINCT ON (polygon_path,path) id,ir.geom 
-- polygon_path,path,id,cd_cpob,cd_ver,ST_Length(ST_Boundary(ir.geom)),ST_Length(ST_Intersection(ST_Boundary(ir.geom),ST_Boundary(vcp.the_geom)))
FROM interior_rings ir
LEFT JOIN vereda_cpob vcp ON ST_Intersects(ir.geom,vcp.the_geom)
ORDER BY polygon_path,path,ST_Length(ST_Intersection(ST_Boundary(ir.geom),ST_Boundary(vcp.the_geom))) DESC
), b AS(
SELECT id, ST_Union(ST_Multi(the_geom),ST_Union(ST_Multi(geom))) geom
FROM vereda_cpob
JOIN a USING (id)
GROUP BY id
)
,c AS (
SELECT id, ST_Multi(ST_Union(geom)) geom
FROM (SELECT id,(ST_Dump(geom)).geom FROM b WHERE ST_GeometryType(geom)='ST_GeometryCollection') collec
WHERE ST_GeometryType(geom) IN ('ST_Polygon','ST_MultiPolygon')
GROUP BY id
UNION
SELECT id, ST_Multi(geom) geom
FROM b
WHERE ST_GeometryType(geom) IN ('ST_Polygon','ST_MultiPolygon')
)
UPDATE vereda_cpob vcp
SET the_geom=geom
FROM c
WHERE c.id=vcp.id
;

```


```sql
-- Pass2

DROP TABLE IF EXISTS interior_rings;
CREATE TABLE interior_rings AS(
SELECT a.path polygon_path,(ST_DumpRings(geom)).*
FROM (SELECT (ST_Dump(geom)).* FROM dissolved_colombia) a
);
DELETE FROM interior_rings WHERE path=ARRAY[0];
CREATE INDEX interior_rings_spat_idx ON interior_rings USING GIST(geom);
WITH a AS(
SELECT DISTINCT ON (polygon_path,path) id,ir.geom 
-- polygon_path,path,id,cd_cpob,cd_ver,ST_Length(ST_Boundary(ir.geom)),ST_Length(ST_Intersection(ST_Boundary(ir.geom),ST_Boundary(vcp.the_geom)))
FROM interior_rings ir
LEFT JOIN vereda_cpob vcp ON ST_Intersects(ir.geom,vcp.the_geom)
ORDER BY polygon_path,path,ST_Length(ST_Intersection(ST_Boundary(ir.geom),ST_Boundary(vcp.the_geom))) DESC
), b AS(
SELECT id, ST_Union(ST_Multi(the_geom),ST_Union(ST_Multi(geom))) geom
FROM vereda_cpob
JOIN a USING (id)
GROUP BY id
)
,c AS (
SELECT id, ST_Multi(ST_Union(geom)) geom
FROM (SELECT id,(ST_Dump(geom)).geom FROM b WHERE ST_GeometryType(geom)='ST_GeometryCollection') collec
WHERE ST_GeometryType(geom) IN ('ST_Polygon','ST_MultiPolygon')
GROUP BY id
UNION
SELECT id, ST_Multi(geom) geom
FROM b
WHERE ST_GeometryType(geom) IN ('ST_Polygon','ST_MultiPolygon')
)
UPDATE vereda_cpob vcp
SET the_geom=geom
FROM c
WHERE c.id=vcp.id
;
REFRESH MATERIALIZED VIEW dissolved_colombia;
```

# Turning off the light and leaving

```{r}
dbDisconnect(dev_geogRef)
```

